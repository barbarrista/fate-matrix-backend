[project]
authors = [
  {name = "Nikita Noskov", email = "nik-lagan@yandex.ru"},
]
dependencies = [
    "fastapi[uvicorn]>=0.100.1",
    "pydantic>=2.1.1",
    "asyncpg>=0.28.0",
    "aioinject>=0.9.1",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.2",
    "sqlalchemy>=2.0.19",
    "sentry-sdk>=1.29.0",
    "alembic>=1.11.2",
    "uvicorn>=0.23.2",
]
description = ""
name = ""
version = "0.0.1"

license = {text = "MIT"}
requires-python = ">=3.11"

[build-system]
build-backend = "pdm.pep517.api"
requires = ["pdm-pep517>=1.0.0"]

[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.4.0",
    "pytest>=7.3.2",
    "coverage>=7.2.7",
    "httpx>=0.24.1",
    "ruff>=0.0.274",
    "anyio>=3.7.0",
    "radon>=6.0.1",
    "sqlalchemy-pytest>=0.1.0",
    "types-click>=7.1.8",
    "sqlalchemy-pytest>=0.0.2",
]

[tool.pytest.ini_options]
pythonpath = "src"

[tool.coverage.run]
command_line = "-m pytest -v"
concurrency = ["greenlet", "thread"]
omit = [
  "src/alembic/*",
  "src/adapters/cli/*",
  "src/tasks/*",
]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
]
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.mypy]
exclude = "(alembic)"
plugins = [
  "pydantic.mypy",
]

follow_imports = "silent"
ignore_missing_imports = true

check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true

warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

strict_equality = true
strict_optional = true

[tool.isort]
profile = "black"

[tool.ruff]
fixable = [
  "F",
  "E",
  "W",
  "I",
  "COM",
  "UP",
  "RUF",
]
ignore = [
  "E501", # Line Length
  "A003", # Class attribute ... is shadowing a python builtin
  "ANN101",
  "ANN102",
  "D", # pydocstyle
  "PD", # pandas-vet
  "INP",
  "TCH001",
  "TCH002",
  "TCH003",
  "EXE",
  "RUF001",
  "RUF002",
  "RUF003",
]
select = ["ALL"]
src = ["src", "tests"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "S101",
  "PT006", # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
  "S311",
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Query",
]

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
]
staticmethod-decorators = ["staticmethod"]

[tool.pdm.scripts]
lint = {composite = [
  "ruff check . --fix --show-fixes",
  "black .",
  "ruff check . --fix --show-fixes",
  "mypy .",
  "alembic check",
]}
test = {composite = [
  "coverage run",
  "coverage report",
]}
